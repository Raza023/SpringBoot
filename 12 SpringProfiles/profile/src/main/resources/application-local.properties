# # Database Configuration
# spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver
# spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=local;encrypt=true;trustServerCertificate=true
# #encrypt=true: Ensures the data is encrypted during transmission.
# #trustServerCertificate=true: Bypasses the certificate validation.
# spring.datasource.username=sa
# spring.datasource.password=razaa023

# # JPA Settings
# spring.jpa.database-platform=org.hibernate.dialect.SQLServer2012Dialect
# # Disable automatic naming strategy that converts camelCase to snake_case
# spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true

# H2 Console Configuration
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console


# H2 Database Configuration
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
#Spring Boot looks for this property to decide which SQL scripts to execute during startup. For example: This tells Spring Boot:
#"If you see schema-${platform}.sql, look for schema-h2.sql." and "If you see data-${platform}.sql, look for data-h2.sql."
spring.sql.init.platform=h2

# Show SQL in console
spring.jpa.show-sql=true
logging.level.sql=DEBUG

# every time drop and create a new schema.
spring.jpa.hibernate.ddl-auto=create
#If you want session to be available only in @Transactional
spring.jpa.open-in-view=false

#to run my own schema.sql and data.sql
spring.sql.init.mode=always
#This tells Spring to run Hibernate schema creation first, and only then run your data.sql.
spring.jpa.defer-datasource-initialization=true

#This will give you column names exactly as you define them, LIKE UserId.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
