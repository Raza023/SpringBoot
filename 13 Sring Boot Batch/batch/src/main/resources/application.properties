spring.application.name=batch
server.port=9797

#DB (for offline mongodb)
#spring.data.mongodb.database=Person
#spring.data.mongodb.host=localhost
#spring.data.mongodb.port=27017

# MongoDB Atlas connection
spring.data.mongodb.uri=${MONGO_URI}
# (Optional) Spring data specific settings
spring.data.mongodb.database=Person
# (Optional) Spring settings
spring.data.mongodb.auto-index-creation=true
# Logging level (optional but useful for debugging)
logging.level.org.springframework.data.mongodb.core=DEBUG

#Mail Properties
spring.mail.protocol=smtp
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=imhraza023@gmail.com
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth = true
spring.mail.properties.mail.smtp.starttls.enable = true

# Spring Batch always needs a transactional JobRepository ? needs relational DB
# MongoDB is perfect for your real data, but Spring Batch doesn?t natively support MongoDB as JobRepository
# Using H2 (or any RDBMS) for metadata + MongoDB for business data is the recommended and lightweight approach
# H2 in-memory DB for batch metadata only.
spring.datasource.url=jdbc:h2:mem:batchdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.sql.init.platform=h2
# (Optional) Show SQL for debugging
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
# Create batch schema
spring.batch.jdbc.initialize-schema=always

spring.sql.init.schema-locations=classpath:org/springframework/batch/core/schema-h2.sql
spring.sql.init.mode=always

# The optional: part makes Spring Boot ignore the file if it's missing
# useful if someone else clones your repo but doesn't have that file.
spring.config.import=optional:application-secret.properties
