Swagger:
What is Swagger?
It is used t create documentation for all the RestEndPoints available in our application. 
We create a lot of microservices, so it is difficult to remember all the endpoint URLs.

Purpose:
1) Quick UI integration:
Let's say if I have to send @RequestBody, RequestURL and ReturnResponse to someone in UI team (UI developer). If I provide him html api which is generated by swagger. He can map easily for his UI and can integrate quickly. 
2) Better Productivity and performance:
If a new resource joins, to understand the flow of the application, he can refer the swagger doc through which he can identify the request URL and model that will be transferred over the network.

------------------------------How to create documentation for RestAPI?------------------------------
1) Add 2 dependencies for swagger in main pom:
<!--Add Springdoc OpenAPI dependency-->
<dependency>
    <groupId>org.springdoc</groupId>
    <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
    <version>2.1.0</version> <!-- Use the latest stable version -->
</dependency>

<!-- Spring Boot Starter Web for web applications -->
<!--(for RESTful APIs) (include if not already included)-->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>

2) Let's say if I have to create Swagger documentation for only two controllers And I have 5 controllers written,
so we need to inform swagger to create rest documentation for only 2 controllers.
see SwaggerConfig.java for more info.

3) http://localhost:8080/swagger-ui/index.html

4) In application.properties:
springdoc.swagger-ui.path=/api-docs
#it will make swagger specification available at http://localhost:8080/api-docs as well

5) Add summary and description to each end-point using @Operation and @Parameter.
see BookController.java for more info.

6) Add summary and description to each entity attributes using @Schema.
see Book.java for more info.

7) Add summary and description to each controller at class level using @Tag.
see BookController.java for more info.

8) Add summary and description in Global OpenAPI configuration using @OpenAPIDefinition.
// we can use customOpenAPI() function.
see SwaggerConfig.java for more info.

9) Extracting JSON or yaml spec:   (make sure you have added: springdoc.swagger-ui.path=/api-docs)
http://localhost:8080/v3/api-docs → returns the spec in JSON
http://localhost:8080/v3/api-docs.yaml → returns the spec in YAML (if YAML support is enabled)
If your app is running, just open this URL in your browser

----Extra----
10) If you want to use @ApiOperation instead of @Operation then add following dependency:
<!-- Optional Swagger Annotations for @ApiOperation, @ApiParam, etc. -->
<dependency>
    <groupId>io.swagger</groupId>
    <artifactId>swagger-annotations</artifactId>
    <version>1.6.3</version>
</dependency>