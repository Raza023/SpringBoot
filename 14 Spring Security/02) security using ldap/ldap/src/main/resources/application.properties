spring.application.name=ldap

#http://localhost:9080/views/api/v1/ldap
server.servlet.context-path=/views
server.port=9080

#contains initial data (like users, groups, etc.) to load into the embedded LDAP server when it starts.
spring.ldap.embedded.ldif=classpath:test-server.ldif
#Directory name (dn) is the root node of the directory tree under which all entries
# (like users or groups) will be placed.
spring.ldap.embedded.base-dn=dc=springframework,dc=org
#Sets the LDAP server port (8389 in this case)
spring.ldap.embedded.port=8389

#Visual Tree Representation:
#dc=org
#|__> dc=springframework
#    |__> ou=people
#
#| Attribute     | Meaning                                                              |
#| ------------- | -------------------------------------------------------------------- |
#| `dn`          | Unique path (distinguished name) of the entry                        |
#| `dc`          | Domain component - similar to parts of a domain name                 |
#| `ou`          | Organizational Unit - logical group like a department                |
#| `objectClass` | Tells LDAP which entry this is (`domain`, `organizationalUnit`,..)   |
#| `top`         | A required root object class that all entries inherit                |

# H2 Console Configuration
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# H2 Database Configuration
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
#Spring Boot looks for this property to decide which SQL scripts to execute during startup. For example: This tells Spring Boot:
#"If you see schema-${platform}.sql, look for schema-h2.sql." and "If you see data-${platform}.sql, look for data-h2.sql."
spring.datasource.platform=h2

# Show SQL in console
#spring.jpa.show-sql=true
#logging.level.sql=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql=TRACE

# every time drop and create new schema.
spring.jpa.hibernate.ddl-auto=create
#If you want session to be available only in @Transactional
spring.jpa.open-in-view=false

#to run my own schema.sql and data.sql
spring.sql.init.mode=always
#This tells Spring to run Hibernate schema creation first, and only then run your data.sql.
spring.jpa.defer-datasource-initialization=true

#This will give you column names exactly as you define them, LIKE UserId.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
